SELECT sales.uid, sum(sales.pid) as products_count FROM sales INNER JOIN users ON users.id = sales.uid GROUP BY users.id, users.name, sales.uid;

SELECT users.name, sum(sales.pid) as products_count FROM sales INNER JOIN users ON users.id = sales.uid GROUP BY users.id, users.name, sales.uid;



select * from users join sales on users.id = sales.uid;

select * from users into #tmp_table join sales on users.id = sales.uid;

insert into #temp(uid, pid, )


SELECT Orders.CustomerID,
    FORMAT (SUM(([Order Details].UnitPrice * [Order Details].Quantity) * 
    (1 - [Order Details].Discount)), "$###,###.00") AS Total
        FROM Orders, [Order Details]
            WHERE Orders.OrderID = [Order Details].OrderID
                GROUP BY Orders.CustomerID
                    ORDER BY SUM(([Order Details].UnitPrice * 
                        [Order Details].Quantity) * (1 - [Order Details].Discount)) DESC;



SELECT sales.uid, SUM( sales.quantity) ) AS Total FROM sales, users WHERE sales.uid = users.id GROUP BY sales.uid;
                    

select count( products.pid = 1) from products;

////////////////////////////////////////////////////////////////////////////////////////////////////////////
StringBuilder strB = "CREATE TABLE temp ( id SERIAL PRIMARY KEY, name TEXT, total FLOAT, ";
for(int i = 0; i < prodNum; i++)
{
  strB.append("product" + i + " FLOAT, ");
}

srtB.append(" ); ");

String str = strB.toString();

///////////////////////////////////////////////////////////////////////////////////////////////////////////


select users.name, sales.uid, sales.pid, count(sales.pid) from sales, users where users.id = sales.uid group by users.name, uid, pid;


select users.name, sales.uid, sales.pid, count(sales.pid) from sales, users where users.id = sales.uid group by users.name, uid, pid;

DROP TABLE IF EXISTS temp_table;
CREATE TABLE temp_table AS (select users.name, sales.uid, sales.pid, count(sales.pid) from sales, users where users.id = sales.uid group by users.name, uid, pid);



DROP TABLE IF EXISTS temp_table; CREATE TABLE temp_table AS (select users.name, sales.uid, sales.pid, count(sales.pid) from sales, users where users.id = sales.uid group by users.name, uid, pid);



CREATE TABLE sales (
    id          SERIAL PRIMARY KEY,
    uid         INTEGER REFERENCES users (id) ON DELETE CASCADE,
    pid         INTEGER REFERENCES products (id) ON DELETE CASCADE,
    quantity    INTEGER NOT NULL,
    price	INTEGER NOT NULL
);


//////////////////////////////////////////
test=# select users.name, sales.uid, sales.pid, sum(sales.quantity * sales.price) from sales, users where users.id = sales.uid group by users.name, uid, pid;
 name  | uid | pid | sum 
-------+-----+-----+-----
 user0 |   1 |   4 |   4
 user0 |   1 |   1 |   2
 user2 |   3 |   3 |   1
 user2 |   3 |   1 |   1
 user1 |   2 |   2 |   1
 user1 |   2 |   1 |   1
(6 rows)


test=# select * from sales;
 id | uid | pid | quantity | price 
----+-----+-----+----------+-------
  1 |   1 |   1 |        1 |     1
  2 |   2 |   2 |        1 |     1
  3 |   3 |   3 |        1 |     1
  4 |   1 |   1 |        1 |     1
  5 |   2 |   1 |        1 |     1
  6 |   3 |   1 |        1 |     1
(6 rows)


select users.name, sales.uid, sales.pid, sum(sales.quantity * sales.price) from sales, users where users.id = sales.uid group by users.name, uid, pid;

INSERT INTO sales (uid, pid, quantity,price) VALUES(1, 4 , 2, 2);

///////////////////////////////////////////
SELECT pid, sum(total) FROM temp_table WHERE name = 'user0' AND pid = 1;

DROP TABLE IF EXISTS temp; CREATE TABLE temp ( id SERIAL PRIMARY KEY, name TEXT, uid INTEGER, state TEXT , p0 FLOAT , p1 FLOAT , p2 FLOAT , p3 FLOAT , p4 FLOAT , p5 FLOAT  )

Query: DROP TABLE IF EXISTS temp; CREATE TABLE temp ( id SERIAL PRIMARY KEY, name TEXT, uid INTEGER, state TEXT , prod1 FLOAT , prod2 FLOAT , prod3 FLOAT , prod4 FLOAT , prod5 FLOAT , prod6 FLOAT  )

"INSERT INTO temp(name, uid, state," + " prod" + pid +") VALUES( '"+ users.name +"', " + users.uid + " 0, 0 , 0,)"

StringBuilder str = new StringBuilder();
str.append("INSERT INTO temp(name, uid, state");
while(ismore)
{
  str.append(", prod" + pid);
}
str.append(") VALUES( '");


INSERT INTO users (name, role, age, state) VALUES('user2','customer',2,'CA');


//////////////////////

INSERT INTO temp(name, uid, statenull, prod1, prod2, prod3, prod4, prod5, prod6 ) VALUES( 'user0', 1, CA, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
INSERT INTO temp(name, uid, statenull, prod1, prod2, prod3, prod4, prod5, prod6 ) VALUES( 'user0', 1, CA, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)'user1', 2, CA, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
INSERT INTO temp(name, uid, statenull, prod1, prod2, prod3, prod4, prod5, prod6 ) VALUES( 'user0', 1, CA, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)'user1', 2, CA, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)'user2', 3, CA, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
INSERT INTO temp(name, uid, statenull, prod1, prod2, prod3, prod4, prod5, prod6 ) VALUES( 'user0', 1, CA, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)'user1', 2, CA, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)'user2', 3, CA, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)'user3', 5, CA, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
/////////////////////

**********************************************
UPDATE Customers SET ContactName='Alfred Schmidt', City='Hamburg' WHERE CustomerName='Alfreds Futterkiste';


UPDATE temp SET prod1 = 100.0 WHERE uid = 1;
*************************************************
select users.name, sales.uid, sales.pid, sum(sales.quantity * sales.price) from sales, users where users.id = sales.uid group by users.name, uid, pid;
 name  | uid | pid | sum 
-------+-----+-----+-----
 user0 |   1 |   4 |  10
 user0 |   1 |   1 |   2
 user2 |   3 |   3 |   1
 user2 |   3 |   1 |   1
 user1 |   2 |   2 |   1
 user1 |   2 |   1 |   1
(6 rows)

test=# select * from sales;
 id | uid | pid | quantity | price 
----+-----+-----+----------+-------
  1 |   1 |   1 |        1 |     1
  2 |   2 |   2 |        1 |     1
  3 |   3 |   3 |        1 |     1
  4 |   1 |   1 |        1 |     1
  5 |   2 |   1 |        1 |     1
  6 |   3 |   1 |        1 |     1
  7 |   1 |   4 |        2 |     2
  8 |   1 |   4 |        2 |     3
(8 rows)

<TABLE BORDER="3" CELLPADDING="10" CELLSPACING="10">
		<TD>
			<TABLE BORDER="3" CELLPADDING="3" CELLSPACING="3">
				<TD>C1 R1 Table</TD>
				<TD>C2 R1 Table</TD>
				<TR>
					<TD>Row 2??&nbsp;Table</TD>
					<TD>Row 2 HERE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Table</TD>
				</TR>
			</TABLE>
		</TD>
		<TD>The cell next to this one has a smaller table inside of it, a
			table inside a table.</TD>
	</TABLE>
////////////////////////////////////////////////////////////////////////////
Starter Table:

<TABLE BORDER="3" CELLPADDING="10" CELLSPACING="10">
  <TD>
    <TABLE BORDER="3" CELLPADDING="3" CELLSPACING="3">
      <TD>2nd C1 R1 Table</TD>
      <TD>2nd C2 R1Table</TD>
        <TR>
	  <TD>2nd C1 R2&nbsp;Table</TD>
	  <TD>2nd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Table</TD>
	</TR>
    </TABLE>
  </TD>
  <TD>The cell next to this one has a smaller table inside of it, a table inside a table.</TD>
</TABLE>
////////////////////////////////////////////////////////////////////////////



Modified Table:
<TABLE BORDER="3" CELLPADDING="10" CELLSPACING="10">
			<TD><h1>View by Customer:</h1> <%
 	int count = 0;
 %>
				<TABLE BORDER="3" CELLPADDING="3" CELLSPACING="3">
					<TD><b>Name:</b></TD>
					<%
                                                //get Product Titles for table
						boolean moreProd;
						while (moreProd = currentUser.prodRS.next()) {
							out.write("<TD><b>" + currentUser.prodRS.getString("name")
									+ "</b></TD>");
							count++;
						}
						System.out.println("COUNT: " + count);
					%>
					<%
						boolean more;
						while (more = currentUser.rsBean.next()) {
							out.write("<TR>");
							String name = currentUser.rsBean.getString("name");
							out.write("<TD>" + name + "</TD>");

							for (i = 0; i < count; i++) {
								out.write("<TD>" + i + "</TD>");
							}

							/*out.write("<TD>" + 0 + "</TD>");
							out.write("<TD>" + 0 + "</TD>");
							out.write("<TD>" + 0 + "</TD>");
							out.write("<TD>" + 0 + "</TD>");
							out.write("<TD>" + 0 + "</TD>");*/
							out.write("</TR>");
						}

						currentUser = UserDAO.closeConn(currentUser);
					%>




				</TABLE></TD>
		</TABLE>




INSERT INTO sales (uid, pid, quantity,price) VALUES(2, 5 , 2, 7);
INSERT INTO products (cid, name, SKU, price) VALUES(1, 'p6','SKU6',5);



